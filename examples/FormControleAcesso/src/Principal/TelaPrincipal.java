/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/Application.java to edit this template
 */
package Principal;

import javax.swing.JOptionPane;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.BufferedReader;
import java.io.InputStreamReader;


/**
 *
 * @author arkmed
 */
public class TelaPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form TelaPrincipal
     */
    public TelaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        crachaId = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        logStacktrace = new javax.swing.JTable();
        menuBar = new javax.swing.JMenuBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Controle de Acesso");

        crachaId.setFont(new java.awt.Font("Liberation Sans", 0, 24)); // NOI18N
        crachaId.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                crachaIdFocusLost(evt);
            }
        });
        crachaId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                crachaIdKeyTyped(evt);
            }
        });

        logStacktrace.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Horario", "#"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(logStacktrace);
        if (logStacktrace.getColumnModel().getColumnCount() > 0) {
            logStacktrace.getColumnModel().getColumn(0).setMinWidth(100);
            logStacktrace.getColumnModel().getColumn(0).setMaxWidth(100);
        }

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(98, 98, 98)
                .addComponent(crachaId, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(106, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(crachaId, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crachaIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_crachaIdFocusLost
        //crachaId.requestFocus();
    }//GEN-LAST:event_crachaIdFocusLost

    private void crachaIdKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_crachaIdKeyTyped
        if(crachaId.getText().length() == 12){
            String[] workerCracha = crachaId.getText().split("(?<=\\D)(?=\\d)|(?<=\\d)(?=\\D)");
            if(workerCracha[0].length() == 3 && workerCracha[1].length() == 7){
                //crachaVariavel.setVisible(true);
                //crachaVariavel.setText("Consultando cracha pertencente a filial " + workerCracha[0] + " do " + workerCracha[2] + " (" + workerCracha[1] + ")");
                crachaId.setEnabled(false);
                String[] colunas = {"Horario", "#"};
                String[][] dados = new String[19][2];
                String atualHora = new SimpleDateFormat("HH:mm:ss").format(new Date());
                dados[0][0] = atualHora;
                dados[0][1] = "Consultando integracao endpoint via API";
                logStacktrace.setModel(new javax.swing.table.DefaultTableModel(dados, colunas));
                if (logStacktrace.getColumnModel().getColumnCount() > 0) {
                    logStacktrace.getColumnModel().getColumn(0).setMinWidth(100);
                    logStacktrace.getColumnModel().getColumn(0).setMaxWidth(100);
                }

                new EventScheduler().addEvent(250L, ()->{
                    String timeHour = new SimpleDateFormat("HH:mm:ss").format(new Date());
                    dados[1][0] = timeHour;
                    dados[1][1] = "Conectando";
                    logStacktrace.setModel(new javax.swing.table.DefaultTableModel(dados, colunas));
                    if (logStacktrace.getColumnModel().getColumnCount() > 0) {
                        logStacktrace.getColumnModel().getColumn(0).setMinWidth(100);
                        logStacktrace.getColumnModel().getColumn(0).setMaxWidth(100);
                    }
                });

                new EventScheduler().addEvent(500L, ()->{
                    String timeHour = new SimpleDateFormat("HH:mm:ss").format(new Date());
                    dados[2][0] = timeHour;
                    dados[2][1] = "Fazendo requisicao";
                    logStacktrace.setModel(new javax.swing.table.DefaultTableModel(dados, colunas));
                    if (logStacktrace.getColumnModel().getColumnCount() > 0) {
                        logStacktrace.getColumnModel().getColumn(0).setMinWidth(100);
                        logStacktrace.getColumnModel().getColumn(0).setMaxWidth(100);
                    }
                });

                new EventScheduler().addEvent(800, ()->{
                    String timeHour = new SimpleDateFormat("HH:mm:ss").format(new Date());
                    dados[3][0] = timeHour;
                    dados[3][1] = "Aguardando resposta...";
                    logStacktrace.setModel(new javax.swing.table.DefaultTableModel(dados, colunas));
                    if (logStacktrace.getColumnModel().getColumnCount() > 0) {
                        logStacktrace.getColumnModel().getColumn(0).setMinWidth(100);
                        logStacktrace.getColumnModel().getColumn(0).setMaxWidth(100);
                    }
                });

                new EventScheduler().addEvent(800, ()->{
                    String timeHour = new SimpleDateFormat("HH:mm:ss").format(new Date());
                    dados[4][0] = timeHour;
                    dados[4][1] = input.send(crachaId.getText());
                    logStacktrace.setModel(new javax.swing.table.DefaultTableModel(dados, colunas));
                    if (logStacktrace.getColumnModel().getColumnCount() > 0) {
                        logStacktrace.getColumnModel().getColumn(0).setMinWidth(100);
                        logStacktrace.getColumnModel().getColumn(0).setMaxWidth(100);
                    }
                });

                
            }else{
                JOptionPane.showMessageDialog(null, "Cracha invalido");
                crachaId.setText("");
                crachaId.requestFocus();
            }
        }
    }//GEN-LAST:event_crachaIdKeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField crachaId;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable logStacktrace;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

}
